import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { createWordCloud } from './mainAPI';

const initialState = {
  wordCloud: null,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const createWordCloudAsync = createAsyncThunk(
  'main/createWordCloud',
  async (url) => {
    const response = await createWordCloud(url);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const mainSlice = createSlice({
  name: 'main',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createWordCloudAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(createWordCloud.fulfilled, (state, action) => {
        state.status = 'idle';
        state.wordCloud = action.payload;
      })
      .addCase(createWordCloudAsync.rejected,(state)=>{
        state.status="idle";
        state.wordCloud = 0;
      })
  },
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectWordCloud = (state) => state.main.wordCloud;

export default mainSlice.reducer;
